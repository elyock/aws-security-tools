---
AWSTemplateFormatVersion: 2010-09-09
Description: "Creates a CodeBuild project, roles, and lambda functions to audit an AWS account
  with prowler on a schedule. Creates the schedule using time-based events in CloudWatch/EventBridge.
  By default, sends 'fails' to Security Hub. Based on github.com/toniblyx/Prowler."
Parameters:
  ServiceName:
    Description: Service name
    Type: String
    Default: 'prowler'
  LogsRetentionInDays:
    Description: Number of days to retain CodeBuild run log events.
    Type: Number
    Default: 3
    AllowedValues: [1, 3, 7, 14, 30, 60, 90, 180, 365]
  ProwlerOptions:
    Description: "Prowler command options: use '-M json-asff -S' to send output
      to Security Hub; use '-q' to send only check failures. For other options
      and checks see github.com/toniblyx/Prowler."
    Type: String
    Default: '-r us-east-1 -f us-east-1 -M json-asff -S -q -c check119'
  ProwlerScheduler:
    Description: When Prowler will run (UTC/GMT), in cron format.
    Type: String
    Default: 'cron(0 3 * * ? *)'

Resources:
  # Role with permissions to start scheduled prowler build/run.
  CodeBuildStartBuildLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: StartBuildInline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                Resource: '*'
  # Role with privileges to build/run prowler and send results to Security Hub.         
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'prowler-codebuild-role'
      Path: '/service-role/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/job-function/SupportUser'
        - 'arn:aws:iam::aws:policy/job-function/ViewOnlyAccess'
        - 'arn:aws:iam::aws:policy/SecurityAudit'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: LogGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
        - PolicyName: CodeBuild
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Effect: Allow
                Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
        - PolicyName: SecurityHubFindings
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - securityhub:BatchImportFindings
                  - securityhub:GetFindings
                Effect: Allow
                Resource: !Sub 'arn:aws:securityhub:${AWS::Region}::product/prowler/prowler'
        - PolicyName: ExtraViewPrivileges
          PolicyDocument:
            Version : '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - 'dax:ListTables'
                - 'ds:ListAuthorizedApplications'
                - 'ds:DescribeRoles'
                - 'ec2:GetEbsEncryptionByDefault'
                - 'ecr:Describe*'
                - 'glue:Get*'
                - 'glue:SearchTables'
                - 'support:Describe*'
                - 'tag:GetTagKeys'
              Resource: '*'
        - PolicyName: AssumeRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/prowler-codebuild-role'

  # Pipe to 'echo' prevents build failures from prowler exit status 3 (when
  #   prowler identifies security issues it returns exit status to 3).
  ProwlerCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
              commands:
                - echo "Installing Prowler and dependencies..."
                - pip3 install detect-secrets 
                - yum -y install jq
                - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                - unzip awscliv2.zip
                - ./aws/install
                - git clone https://github.com/toniblyx/prowler
            build:
              commands:
                - echo "Running Prowler as ./prowler $PROWLER_OPTIONS"
                - cd prowler
                - ./prowler $PROWLER_OPTIONS || echo "prowler exited with error status $?"
            post_build:
              commands:
                - echo "prowler done."
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: PROWLER_OPTIONS
            Value: !Ref 'ProwlerOptions'
            Type: PLAINTEXT
      Description: Run Prowler assessment
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      TimeoutInMinutes: 300

  ProwlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${ProwlerCodeBuild}'
      RetentionInDays: !Ref LogsRetentionInDays

  ProwlerSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Schedule for Lambda function that triggers Prowler in CodeBuild.
      ScheduleExpression: !Ref ProwlerScheduler
      State: ENABLED
      Targets:
        - Arn: !Sub ${ProwlerScheduleLambdaFunction.Arn}
          Id: ProwlerSchedule
  
  ProwlerSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${ProwlerScheduleLambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${ProwlerSchedule.Arn}

  ProwlerScheduleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !Sub ${CodeBuildStartBuildLambdaRole.Arn}
      Timeout: 120
      Runtime: python3.8
      Environment:
        Variables:
          buildName: !Ref ProwlerCodeBuild
      Code:
        ZipFile: |
          import boto3
          import os

          def lambda_handler(event,context):
            codebuild_client = boto3.client('codebuild')
            print("Running Prowler scheduled!: " + os.environ['buildName'])
            project_name = os.environ['buildName']
            response = codebuild_client.start_build(projectName=project_name)
            print(response)
            print("Respond: SUCCESS")